import * as Sequelize from 'sequelize';
import { Model, Optional } from 'sequelize';
import type { ac, acId } from './ac';
export interface companysetupAttributes {
    code: string;
    name?: string;
    address?: string;
    telno?: string;
    stregno?: string;
    ntnno?: string;
    yearstart?: Date;
    yearend?: Date;
    protectdate?: Date;
    contactno?: string;
    tcreditors?: string;
    tdebitors?: string;
    transporter?: string;
    sol_comm?: string;
    os_bilty?: string;
    show_stax_inv?: number;
    add_Inv_stock?: number;
    last_year_db_name?: string;
    image_saving?: number;
    promotion?: string;
    doc_db?: string;
    app_version?: string;
}
export declare type companysetupPk = "code";
export declare type companysetupId = companysetup[companysetupPk];
export declare type companysetupOptionalAttributes = "name" | "address" | "telno" | "stregno" | "ntnno" | "yearstart" | "yearend" | "protectdate" | "contactno" | "tcreditors" | "tdebitors" | "transporter" | "sol_comm" | "os_bilty" | "show_stax_inv" | "add_Inv_stock" | "last_year_db_name" | "image_saving" | "promotion" | "doc_db" | "app_version";
export declare type companysetupCreationAttributes = Optional<companysetupAttributes, companysetupOptionalAttributes>;
export declare class companysetup extends Model<companysetupAttributes, companysetupCreationAttributes> implements companysetupAttributes {
    code: string;
    name?: string;
    address?: string;
    telno?: string;
    stregno?: string;
    ntnno?: string;
    yearstart?: Date;
    yearend?: Date;
    protectdate?: Date;
    contactno?: string;
    tcreditors?: string;
    tdebitors?: string;
    transporter?: string;
    sol_comm?: string;
    os_bilty?: string;
    show_stax_inv?: number;
    add_Inv_stock?: number;
    last_year_db_name?: string;
    image_saving?: number;
    promotion?: string;
    doc_db?: string;
    app_version?: string;
    transporter_ac: ac;
    getTransporter_ac: Sequelize.BelongsToGetAssociationMixin<ac>;
    setTransporter_ac: Sequelize.BelongsToSetAssociationMixin<ac, acId>;
    createTransporter_ac: Sequelize.BelongsToCreateAssociationMixin<ac>;
    sol_comm_ac: ac;
    getSol_comm_ac: Sequelize.BelongsToGetAssociationMixin<ac>;
    setSol_comm_ac: Sequelize.BelongsToSetAssociationMixin<ac, acId>;
    createSol_comm_ac: Sequelize.BelongsToCreateAssociationMixin<ac>;
    os_bilty_ac: ac;
    getOs_bilty_ac: Sequelize.BelongsToGetAssociationMixin<ac>;
    setOs_bilty_ac: Sequelize.BelongsToSetAssociationMixin<ac, acId>;
    createOs_bilty_ac: Sequelize.BelongsToCreateAssociationMixin<ac>;
    static initModel(sequelize: Sequelize.Sequelize): typeof companysetup;
}
